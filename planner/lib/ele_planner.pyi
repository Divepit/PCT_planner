from __future__ import annotations
import ele_planner
import typing
import numpy
_Shape = typing.Tuple[int, ...]

__all__ = [
    "OfflineElePlanner"
]


class OfflineElePlanner():
    def __init__(self, max_heading_rate: float, use_quintic: bool = False) -> None: ...
    def debug(self) -> None: ...
    def get_debug_path(self) -> numpy.ndarray[numpy.float64, _Shape[m, n]]: ...
    def get_map(self) -> DenseElevationMap: ...
    def get_path_finder(self) -> Astar: ...
    def get_trajectory_optimizer(self) -> GPMPOptimizerWnoa: ...
    def get_trajectory_optimizer_wnoj(self) -> GPMPOptimizer: ...
    def init_map(self,
                 arg0: float, 
                 arg1: float, 
                 arg2: float, 
                 arg3: int, 
                 arg4: float, 
                 arg5: numpy.ndarray[numpy.float64, _Shape[m, n]], 
                 arg6: numpy.ndarray[numpy.float64, _Shape[m, n]], 
                 arg7: numpy.ndarray[numpy.float64, _Shape[m, n]], 
                 arg8: numpy.ndarray[numpy.float64, _Shape[m, n]], 
                 arg9: numpy.ndarray[numpy.float64, _Shape[m, n]], 
                 arg10: numpy.ndarray[numpy.float64, _Shape[m, n]]
                 ) -> None: ...
    def plan(self, arg0: numpy.ndarray[numpy.int32, _Shape[3, 1]], arg1: numpy.ndarray[numpy.int32, _Shape[3, 1]], arg2: bool) -> bool: ...
    def set_max_iterations(self, arg0: int) -> None: ...
    def set_reference_height(self, arg0: float) -> None: ...
    pass
